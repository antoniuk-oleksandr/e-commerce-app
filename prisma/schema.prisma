generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  firstName    String   @map("first_name") @db.VarChar(255)
  surname      String   @db.VarChar(255)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  carts        Cart[]
  orders       Order[]

  @@map("users")
}

model File {
  id                Int       @id @default(autoincrement())
  name              String    @db.VarChar(255)
  link              String    @unique @db.VarChar(255)
  previewForProduct Product?  @relation("ProductPreview")
  productPictures   Product[] @relation("ProductPictures")

  @@map("files")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  description String      @db.VarChar(255)
  price       Float       @default(0.0)
  /// @db.Check("stock >= 0")
  stock       Int         @default(0)
  previewId   Int         @unique @map("preview_id")
  preview     File        @relation("ProductPreview", fields: [previewId], references: [id])
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @map("updated_at")
  cartItems   CartItem[]
  orderItems  OrderItem[]
  categoryId  Int         @map("category_id")
  category    Category    @relation(fields: [categoryId], references: [id])
  pictures    File[]      @relation("ProductPictures")

  @@map("products")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(255)
  products Product[]

  @@map("categories")
}

model Cart {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now()) @map("created_at")
  userId    Int        @map("user_id")
  user      User       @relation(fields: [userId], references: [id])
  cartItem  CartItem[]

  @@map("carts")
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int     @map("cart_id")
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int         @map("user_id")
  user       User        @relation(fields: [userId], references: [id])
  total      Float
  statusId   Int         @map("status_id")
  status     OrderStatus @relation(fields: [statusId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderStatus {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(255)
  orders    Order[]
  createdAt DateTime @default(now()) @map("created_at")

  @@map("order_statuses")
}

model OrderItem {
  id              Int     @id @default(autoincrement())
  orderId         Int     @map("order_id")
  order           Order   @relation(fields: [orderId], references: [id])
  productId       Int     @map("product_id")
  product         Product @relation(fields: [productId], references: [id])
  quantity        Int     @default(1)
  priceAtPurchase Float   @default(0.0) @map("price_at_purchase")

  @@unique([orderId, productId])
  @@map("order_items")
}
